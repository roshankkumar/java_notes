/*
-	Declare the class as final so it can’t be extended.
-	Make all fields private so that direct access is not allowed.
-	Don’t provide setter methods for variables
-	Make all mutable fields final so that it’s value can be assigned only once.
-	Initialize all the fields via a constructor performing deep copy.
-	Perform cloning of objects in the getter methods to return a copy rather than returning the -	actual object reference.

*/


package com.map.demo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public final class DemoFinalClass {
	private int empId;
	private String name;
	private ArrayList<Integer> fees;
	
	public int getEmpId() {
		return empId;
	}
	public String getName() {
		return name;
	}
	public ArrayList<Integer> getFees() {
		return (ArrayList<Integer>)fees.clone(); // Return clone of object of mutable objects so original is not modified 
		//return fees;
	}
	
	public DemoFinalClass(int empId, String name, ArrayList<Integer> feesAL) {
		super();
		this.empId = empId;
		this.name = name;
		//ArrayList<Integer> tempList = new ArrayList<>(feesAL);
		this.fees = new ArrayList<>(feesAL);
	}
	
	public static void main(String args[]) {
		ArrayList<Integer> h1 = new ArrayList<Integer>();
		h1.add(1);
		h1.add(2);
		
		String s = "original";
		
		int i=10;
		
		DemoFinalClass ce = new DemoFinalClass(i,s,h1);
		
		//Lets see whether its copy by field or reference
		System.out.println(s==ce.getName());
		System.out.println(h1 == ce.getFees());
		//print the ce values
		System.out.println("ce id:"+ce.getEmpId());
		System.out.println("ce name:"+ce.getName());
		System.out.println("ce testMap:"+ce.getFees());
		//change the local variable values
		i=20;
		s="modified";
		h1.add(3);
		//print the values again
		System.out.println("ce id after local variable change:"+ce.getEmpId());
		System.out.println("ce name after local variable change:"+ce.getName());
		System.out.println("ce testMap after local variable change:"+ce.getFees());
		
		ArrayList<Integer> listTest = ce.getFees();
		//hmTest.put("4", "new");
		listTest.add(20);
		
		System.out.println("ce testMap after changing variable from accessor methods:"+ce.getFees());
	}

}
